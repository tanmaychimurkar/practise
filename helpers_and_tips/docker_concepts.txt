Different projects have different dependencies based on the project. All interactions between different components
have to be done correctly in order for any application to work correctly.

Docker helps abstract away the dependencies for components between varying OS and hardware requirements, and lets
every part of the project run in an isolated environment.


Containers in docker have their own network, their own volume mounts, their own networks, and are just like VMs. The
only difference is that all the containers share the same os as the machine on which they are running, unlike VMs who
also have their own OS when created.

Container use the kernel to run their process. In such, a linux based OS will only be able to run linux based containers
on it, and a windows based container will not be able to run on a windows based machine.

Images in docker are packages or templates that are used to create one or more containers. every container needs an
image to be able to run.

DockerFile is the configuration of an image should be initialized. DockerFile creates a docker image, and image runs
a container.

------------------------------------------

1) docker run <image-name>: runs a container for the image name specified.

2) docker images: list all the images that are downloaded on the machine

3) to remove images that we no longer need, we can use

docker rmi <image-name>

to remove containers, we use

docker rm <container-name>

4) docker run -d <image> : run docker container in the detached mode, this gives back access to the console once the
application is running.

5) docker run -it <container-name> : run container in interactive mode, grants access to terminal

6) port mapping: every container that we run gets an IP assigned to it, however, this IP can only be accessed from
inside the docker container. To be able to access the IP from the outside (our own machine browser, not docker browser),
we need to map the port of the docker container to the port we want to be able to be accessed outside.

docker run -p my_port:docker_port -d --name <my-container-name> <image-name>

7) data persistency: docker container has its own file system. for persistent data storage on our local machine, we
can map a directory path from our machine to the directory of the docker container.

docker run -v my-local-path:docker-path <image-name>


8) logs of a running container: we can check the logs of any container that is running in our machine by the following
command


docker logs <container-name>

9) we can get information about a running container, such as its IP or any other parameter using the inspect command as
follows

docker inspect <container-name>

-------------------------------------------------------

Creating owr own image. For this, we need to create a DockerFile. A DockerFile takes in it a set of commands that
can be executed as the image boots up, and then runs the commands we mentioned as a set of instructions.

DockerFile has an `Instruction Argument` format.

we can pass environment variables to the docker run command that will take the value of the variable from our
environment. To get the list of environment variables for a running container, we can use `docker inspect <container>`
to get the environment variables from the full config.

---------------------------------------

CMD vs ENTRYPOINT

In docker, we can mention what command to run when a container boots up. We can provide the commands in either plain
string or in bracket format (wherein the first input should be an executable and the second argument should be the
value for that executable).

The main difference between CMD and ENTRYPOINT is that CMD commands can be overwritten while the ENTRYPOINT commands
are appended. For example, if we pass in the DockerFile the following CMD command,

FROM UBUNTU

CMD sleep 10

then the container will sleep when it boots up for 10 seconds. However, if we then want to make the container sleep for
15 seconds instead of 10 seconds, then we run the container as follows:

docker run <above-container> sleep 15

This does not look good, as we have the mention the command and the argument again when we run the container. Instead,
if we use ENTRYPOINT, then we have the following DockerFile

FROM UBUNTU

ENTRYPOINT ["sleep"]

Now when we run the container, we can run it as:

docker run <above-container-name> 10

Thus, the arguments are appended when we are using ENTRYPOINT in the DockerFile.


If we want the ENTRYPOINT to take a default argument for a command, we can create a CMD after defining the ENTRYPOINT
command, and thus the default argument will always be taken from the CMD unless otherwise passed when using docker run


------------------------------------

Docker compose file

If we have to run multiple containers for our whole application, we could in theory run each container step wise.
However, this can be done in a better way using the docker-compose file. This file specifies the configuration that a
set of containers should use and run when the compose configuration file is invoked.

However, if there are many containers, they will not be able to communicate between themselves if they are run as single
instances via docker run. We can create such a link between different containers by passing the argument --link in the
docker container that we want to link.

the specification for the compose file can be looked from the docker compose documentation.

-------------------------------------

The processes that are spawned on a machine use the process IDs from the host machine. The child processes get a
different process id name, but they are derived from the machine process ids.

Docker thus has to manage how much memory is assigned to the main host machine and for the containers, and this is done
via cgroups















