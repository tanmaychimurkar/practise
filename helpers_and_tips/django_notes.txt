Django follows the common MVC flow, where the model is the database ORMs, the views are the html files that we want the
user to see on the webpage, and the controller are the files that route the user from one place to another. Controller
contains the main logic about what should be the decision and where should it lead to once a decision has been made.

In Django, we can always create ORMs that are agnostic to the type of database that they connect to, and this is
handled internally by django.

The implementation of the ORMs is straightforward, as in most of the table creation definition has to be transferred to
the ORM and it will take care of creating such a table. The column types of the table can be looked at from the
documentation from the Django docs and it can thus be implemented to be the same as the table creation structure.

For creating views, we need a request and a response cycle. For this, we can use HttpRequest and HttpResponse from
Django in the views file to either take a user request or to show to the user a response on their web browser. Much of
this should be made safer when taking requests from the user, and to stop the user from passing any type of HTML in the
url itself, we can use the Django escape character. Thus even if the user passes some from of structured input that
parses into HTML code, the escape function from django.utils.html would not let it inject into our code.

Using plain html in the response function needs a lot of string concatenation and syntax management. Instead of using
plain html, we can use a template that will allow us to bypass all the plain string html that we pass. For this reason,
Django uses the so-called Jinja syntax, which is a means to pass user variables into the HTML directly. The main logic
still remains the same, it's just that all the parameters that are to be fetched via the get cycle are now wrapped into
double curly braces (jinja syntax) and are referred to from the view function that is defined in views.

We can also put logic to the parameters that we fetch from the get cycle by using {% %} and write if-else conditions
referring to the name of the parameter that we are fetching from the get cycle.

For views that we create, we can also use inheritance for templates, wherein we can have one base template from which
the other templates can extend and pass extra information between the block of the content. This is a common practise
for inheriting templates in Django.

#### Views

Views are important in Django and are at the core of every application. The urls are responsible for getting a user to
a view, wherein the user does his activity and through that activity, there is exchange of information via the database.

In Django world, to parse a url, there is a terminology that is followed. Usually after the main domain, the first
thing that follows is the application name, and is also the folder name, as the terminology dictates that both of them
be the same.

It is possible to route a request to a pre-defined class from Django itself, to a function in views.py file of the
application, or routed to a class in views.py

We can process the request that a user has made either via a view function or a view class. In view class, the main
class from which we inherit is the View class, and the functions that we have to write for this class is the get and
the post function, which are related to the GET and the POST method respectively. In the url list, if we are using a
class based view, then we need to add the ClassName.as_view() after the path of the url to be able to display the
HttpResponse as a view.

In Django, we can pass a url as '/something-blah-blah' after the main url that routes to the view, and this can be
done by creating the url in urls.py such that has a <int:my_number> or <slug:my_string> attached to it after the
normal Django url.

We use template engine to get the parameters from a user request instead of doing a string concatenation, as concat
always has a lot of overhead on the syntax and other stuff. In our views, we pass a dictionary to the response function,
which in turn calls the view that is to be returned. Inside this view is where we set the Jinja2 syntax for the key of
the dictionary that we passed in. This makes it easier to return the responses to the user, as they responses can now
be returned dynamically via the template engine that is being used in the actual html file in the views folder of the
application. Templates in Django can be inherited, and they can be thought of as containers, wherein for example, we
could have a template with one styling and the other templates introduce new variables by extending that template, but
retain the same style.


#### URLs

In Django, most of the times developers choose to keep a hardcoded name for each url path in the urls list. This can
get very messy if we later want that particular url to be called something else, as we will have to change that url in
the urls list, and then later we will also have to find and replace the new url path name in all the places where that
url path was being used. Instead of this, in the path function for each element in the urls list, we can create a
parameter called name, that would take the namespace that url is referring to. The next step is to then replace all the
places wherein the hardcoded name of the url is used in the code and replace that with the Jinja2 syntax for referring
to the path of the url by the name declared in the path function for that particular url. The syntax for this looks as
follows:

    {% url 'route:my_url_name_variable' %}

The above can be used as a href in a different views file where the url acts as a reference.

We can combine views and urls to create generic views, which are largely inheriting from a ListView object in Django.
Using generic views makes the job of creating a same view for a different model, and eventually different url patterns
that follow that model very easy. More about































